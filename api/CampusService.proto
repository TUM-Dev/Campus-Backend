syntax = "proto3";

option go_package = "github.com/TUM-Dev/Campus-Backend/api";
option java_multiple_files = true;
option java_package = "app.tum.campus.api";
option java_outer_classname = "CampusApiProto";
option csharp_namespace = "CampusApiProto";

package api;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service Campus {
  rpc GetTopNews (google.protobuf.Empty) returns (GetTopNewsReply) {
    option (google.api.http) = {
      get: "/news/top"
    };
  }

  rpc GetNewsSources (google.protobuf.Empty) returns (NewsSourceArray) {
    option (google.api.http) = {
      get: "/news/sources",
      response_body: "sources"
    };
  }

  rpc SearchRooms (SearchRoomsRequest) returns (SearchRoomsReply) {
    option (google.api.http) = {
      post: "/roomfinder/room/search",
      body: "*",
      response_body: "rooms"
    };
  }

  // a location is a campus location/building, e.g. "Garching Forschungszentrum"
  rpc GetLocations (GetLocationsRequest) returns (GetLocationsReply) {
    option (google.api.http) = {
      get: "/locations/{location}",
      response_body: "locations"
    };
  }

  rpc GetRoomMaps (GetRoomMapsRequest) returns (GetRoomMapsReply) {
    option (google.api.http) = {
      post: "/roomfinder/maps",
      body: "*",
      response_body: "maps"
    };
  }

  rpc GetRoomCoordinates (GetRoomCoordinatesRequest) returns (GetRoomCoordinatesReply) {
    option (google.api.http) = {
      post: "/roomfinder/room/coordinates",
      body: "*"
    };
  }

  rpc GetRoomSchedule (GetRoomScheduleRequest) returns (GetRoomScheduleReply) {
    option (google.api.http) = {
      post: "/roomfinder/room/scheduleById",
      body: "*",
      response_body: "events"
    };
  }


  // This endpoint retrieves Cafeteria Ratings from the Backend.
  rpc GetCafeteriaRatings (CafeteriaRatingRequest) returns (CafeteriaRatingReply) {
    option (google.api.http) = {
      post: "/cafeteria/rating/get",
      body: "*",
    };
  }


  rpc GetDishRatings (DishRatingRequest) returns (DishRatingReply) {
    option (google.api.http) = {
      post: "/dish/rating/get",
      body: "*",
    };
  }



  rpc NewCafeteriaRating (NewCafeteriaRatingRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/cafeteria/rating/new",
      body: "*",
    };
  }

  rpc NewDishRating (NewDishRatingRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/dish/rating/new",
      body: "*",
    };
  }

  rpc GetAvailableDishTags (google.protobuf.Empty) returns (GetRatingTagsReply) {
    option (google.api.http) = {
      get: "/dish/rating/allTags",
      body: "*",
      response_body: "ratingTags"
    };
  }

  rpc GetAvailableCafeteriaTags (google.protobuf.Empty) returns (GetRatingTagsReply) {
    option (google.api.http) = {
      get: "/cafeteria/rating/allTags",
      body: "*",
      response_body: "ratingTags"
    };
  }

  rpc GetCafeterias (google.protobuf.Empty) returns (GetCafeteriaReply) {
    option (google.api.http) = {
      get: "/cafeteria/allCafeterias",
      body: "*",
      response_body: "cafeteria"
    };
  }


  rpc GetDishes (GetDishesRequest) returns (GetDishesReply) {
    option (google.api.http) = {
      get: "/dish/allDishes",
      body: "*",
      response_body: "dish"
    };
  }



  rpc GetResponsiblePerson (google.protobuf.Empty) returns (GetResponsiblePersonReply) {
    option (google.api.http) = {
      get: "/barrierfree/contacts",
    };
  }

  rpc GetBuilding2Gps (google.protobuf.Empty) returns (GetBuilding2GpsReply) {
    option (google.api.http) = {
      get: "/barrierfree/getBuilding2Gps",
    };
  }

  rpc GetAreaFacilitiesByBuildingNr (GetAreaFacilitiesByBuildingNrRequest) returns (GetAreaFacilitiesByBuildingNrReply) {
    option (google.api.http) = {
      get: "/barrierfree/nerby",
    };
  }

  rpc GetListOfToilets (google.protobuf.Empty) returns (GetListOfToiletsReply) {
    option (google.api.http) = {
      get: "/barrierfree/listOfToilets",
    };
  }

  rpc GetListOfElevators (google.protobuf.Empty) returns (GetListOfElevatorsReply) {
    option (google.api.http) = {
      get: "/barrierfree/listOfElevators",
    };
  }

  rpc GetMoreInformation (google.protobuf.Empty) returns (GetMoreInformationReply) {
    option (google.api.http) = {
      get: "/barrierfree/moreInformation",
    };
  }


  rpc GetOpeningTimes (GetOpeningTimesRequest) returns (GetOpeningTimesReply) {
    option (google.api.http) = {
      Get: "/openingtimes/{language}",
    };
  }


  rpc GetUpdateNote (GetUpdateNoteRequest) returns (GetUpdateNoteReply) {
    option (google.api.http) = {
      get: "/updatenote/{version}",
    };
  }


  rpc GetStudyRoomList (GetStudyRoomListRequest) returns (GetStudyRoomListReply) {
    option (google.api.http) = {
      get: "/studyroom/list",
    };
  }

  rpc GetEventList(GetEventListRequest) returns (GetEventListReply) {
    option (google.api.http) = {
      get: "/event/list",
    };
  }

  rpc PostEventTicketMy(PostEventTicketMyRequest) returns (PostEventTicketMyReply) {
    option (google.api.http) = {
      post: "/event/ticket/my",
    };
  }

  rpc PostEventTicket(PostEventTicketRequest) returns (PostEventTicketReply) {
    option (google.api.http) = {
      post: "/event/ticket/{ticket_id}",
    };
  }

  rpc GetEventTicketType(GetEventTicketTypeRequest) returns (GetEventTicketTypeReply) {
    option (google.api.http) = {
      get: "/event/ticket/type/{event_id}",
    };
  }

  rpc PostEventTicketReserveMultiple(PostEventTicketReserveMultipleRequest) returns (PostEventTicketReserveMultipleReply) {
    option (google.api.http) = {
      post: "/event/ticket/reserve/multiple",
    };
  }

  rpc PostEventTicketPaymentStripePurchaseMultiple(PostEventTicketPaymentStripePurchaseMultiple) returns (PostEventTicketPaymentStripePurchaseMultiple) {
    option (google.api.http) = {
      post: "/event/ticket/payment/stripe/purchase/multiple",
    };
  }

  rpc PostEventTicketPaymentStripeEphermalKeyTicket(PostEventTicketPaymentStripeEphermalKeyRequest) returns (PostEventTicketPaymentStripeEphermalKeyReply) {
    option (google.api.http) = {
      post: "/event/ticket/payment/stripe/ephemeralkey",
    };
  }

  rpc GetEventTicketStatus(GetEventTicketStatusRequest) returns (GetEventTicketStatusReply) {
    option (google.api.http) = {
      get: "/event/ticket/status/{event_id}",
    };
  }

  rpc GetKino(GetKinoRequest) returns (GetKinoReply) {
    option (google.api.http) = {
      get: "/kino/{last_id}",
    };
  }

  rpc PostFeedback(PostFeedbackRequest) returns (PostFeedbackReply) {
    option (google.api.http) = {
      post: "/feedback",
    };
  }

  rpc PostFeedbackIDImageNr(PostFeedbackIDImageNrRequest) returns (PostFeedbackIDImageNrReply) {
    option (google.api.http) = {
      post: "/feedback/{id}/{image_nr}",
    };
  }


  rpc PostDeviceRegister(PostDeviceRegisterRequest) returns (PostDeviceRegisterReply) {
    option (google.api.http) = {
      post: "/device/register",
    };
  }

  rpc GetDeviceVerifyKey(GetDeviceVerifyKeyRequest) returns (GetDeviceVerifyKeyReply) {
    option (google.api.http) = {
      get: "/device/verifyKey",
    };
  }

  rpc PostDeviceAddGcmToken(PostDeviceAddGcmTokenRequest) returns (PostDeviceAddGcmTokenReply) {
    option (google.api.http) = {
      post: "/device/addGcmToken",
    };
  }

  rpc GetDeviceUploaded(GetDeviceUploadedRequest) returns (GetDeviceUploadedReply) {
    option (google.api.http) = {
      get: "/device/uploaded/{lrz_id}",
    };
  }


  rpc GetNotifications(GetNotificationsRequest) returns (GetNotificationsReply) {
    option (google.api.http) = {
      get: "/notifications",
    };
  }

  rpc GetNotificationsConfirm(GetNotificationsConfirmRequest) returns (GetNotificationsConfirmReply) {
    option (google.api.http) = {
      get: "/notifications/confirm/{notification_id}",
    };
  }

  rpc GetMembers(GetMembersRequest) returns (GetMembersReply) {
    option (google.api.http) = {
      get: "/members/{lrz_id}",
    };
  }

  rpc PostChatRooms(PostChatRoomsRequest) returns (PostChatRoomsReply) {
    option (google.api.http) = {
      post: "/chat/rooms/",
    };
  }

  rpc GetChatRoomsRoomId(GetChatRoomsRoomIdRequest) returns (GetChatRoomsRoomIdReply) {
    option (google.api.http) = {
      get: "/chat/rooms/{room_id}",
    };
  }

  rpc PostChatRoomsRoomIdLeave(PostChatRoomsRoomIdLeaveRequest) returns (PostChatRoomsRoomIdLeaveReply) {
    option (google.api.http) = {
      post: "/chat/rooms/{room_id}/leave",
    };
  }
  rpc PostChatRoomsRoomIdAdd(PostChatRoomsRoomIdAddRequest) returns (PostChatRoomsRoomIdAddReply) {
    option (google.api.http) = {
      post: "/chat/rooms/{room_id}",
    };
  }

  rpc PutChatRoomsRoomIdMessage(PutChatRoomsRoomIdMessageRequest) returns (PutChatRoomsIdRoomMessageReply) {
    option (google.api.http) = {
      put: "/chat/rooms/{room_id}/message/",
    };
  }

  rpc PutChatRoomsRoomIdMessageMessageId(PutChatRoomsRoomIdMessageMessageIdRequest) returns (PutChatRoomsRoomIdMessageMessageIdReply) {
    option (google.api.http) = {
      put: "/chat/rooms/{room_id}/message/{message_id}",
    };
  }

  rpc PostChatRoomsRoomIdMessagesPage(PostChatRoomsRoomIdMessagesPageRequest) returns (PostChatRoomsRoomIdMessagesPageReply) {
    option (google.api.http) = {
      post: "/chat/rooms/{room_id}/messages/{page}",
    };
  }

  rpc PostChatRoomsRoomIdMessages(PostChatRoomsRoomIdMessagesRequest) returns (PostChatRoomsRoomIdMessagesReply) {
    option (google.api.http) = {
      post: "/chat/rooms/{room_id}/messages",
    };
  }


  rpc PostChatMembers(PostChatMembersRequest) returns (PostChatMembersReply) {
    option (google.api.http) = {
      post: "/chat/members",
    };
  }

  rpc GetChatMembersLrzId(GetChatMembersLrzIdRequest) returns (GetChatMembersLrzIdReply) {
    option (google.api.http) = {
      get: "/chat/members/{lrz_id}",
    };
  }

  rpc GetChatMembersSearch(GetChatMembersSearchRequest) returns (GetChatMembersSearchReply) {
    option (google.api.http) = {
      get: "/chat/members/search/{query}",
    };
  }

  rpc PostChatMembersUserIdRooms(PostChatMembersUserIdRoomsRequest) returns (PostChatMembersUserIdRoomsReply) {
    option (google.api.http) = {
      post: "/chat/members/{user_id}/rooms",
    };
  }
}

message GetRoomScheduleRequest {
  int32 room = 1;
  google.protobuf.Timestamp start = 2;
  google.protobuf.Timestamp end = 3;
}

message GetRoomScheduleReply {
  message RoomScheduleEvent {
    google.protobuf.Timestamp start = 1;
    google.protobuf.Timestamp end = 2;
    string title = 3;
    int32 event_id = 4;
    string course_code = 5;
  }
  repeated RoomScheduleEvent events = 1;
}

message GetRoomCoordinatesRequest {
  string arch_id = 1;
}

message GetRoomCoordinatesReply {
  string utm_zone = 1;
  float utm_easting = 2;
  float utm_northing = 3;
}

message GetRoomMapsRequest {
  string arch_id = 1;
}

message GetRoomMapsReply {
  message Map {
    int64 map_id = 1;
    string description = 2;
    int64 scale = 3;
    int64 width = 4;
    int64 height = 5;
  };
  repeated Map maps = 1;
}

message GetLocationsRequest {
  string location = 1;
}

message GetLocationsReply {
  message Location {
    string location = 1;
    string name = 2;
    string lon = 3;
    string lat = 4;
    string radius = 5;
  }
  repeated Location locations = 1;
}

message SearchRoomsRequest {
  string query = 1;
}

message SearchRoomsReply {
  repeated Room rooms = 1;
}

message Room {
  int32 room_id = 1;
  string room_code = 2;
  string building_nr = 3;
  string arch_id = 4;
  string info = 5;
  string address = 6;
  string purpose = 7;
  string campus = 8;
  string name = 9;
}

message NewsSourceArray {
  repeated NewsSource sources = 1;
}

message NewsSource {
  string source = 1;
  string title = 2;
  string icon = 3;
}

message GetTopNewsReply {
  string image_url = 1;
  string link = 2;
  google.protobuf.Timestamp created = 3;
  google.protobuf.Timestamp from = 4;
  google.protobuf.Timestamp to = 5;
}



message CafeteriaRatingRequest {
  // cafeteriaId Mandatory Name of the cafeteria (EAT-API naming scheme "MENSA_GARCHING")
  string cafeteriaId = 1;
  // Optional Parameter to define an interval for the ratings (Lower bound)
  google.protobuf.Timestamp from = 2;
  // Optional Parameter to define an interval for the ratings (Upper bound)
  google.protobuf.Timestamp to = 3;
  // Optional Parameter defines how many ratings are queried. Default is 3, Maximum is 100 ratings in one request
  int32 limit = 4;
}

message DishRatingRequest {
  // Mandatory Name of the cafeteria (EAT-API naming scheme "MENSA_GARCHING")
  string cafeteriaId = 1;
  // Mandatory Name of the dish (EAT-API naming scheme) Must be available int the given mensa
  string dish = 2;
  // Optional Parameter to define an interval for the ratings (Lower bound)
  google.protobuf.Timestamp from = 3;
  // Optional Parameter to define an interval for the ratings (Upper bound)
  google.protobuf.Timestamp to = 4;
  // Optional Parameter defines how many ratings are queried. Default is 3, Maximum is 100 ratings in one request
  int32 limit = 5;
}

message CafeteriaRatingReply {
  repeated SingleRatingReply rating = 1;
  double avg = 2;
  double std = 3;
  int32 min = 4;
  int32 max = 5;
  repeated RatingTagResult ratingTags = 6;
}


message DishRatingReply {
  repeated SingleRatingReply rating = 1;
  double avg = 2;
  double std = 3;
  int32 min = 4;
  int32 max = 5;
  repeated RatingTagResult ratingTags = 6;
  repeated RatingTagResult nameTags = 7;
}


message SingleRatingReply{
  // number in the range 1-5
  int32 points = 1;
  // Optional JPEG image in Base64
  bytes image = 2;
  // Optional comment (max 256 chars)
  string comment = 3;
  repeated RatingTagNewRequest ratingTags = 4;
  google.protobuf.Timestamp visited = 5;
}


message NewCafeteriaRatingRequest{
  // number in the range 1-5
  int32 points = 1;
  string cafeteriaId = 2;
  bytes image = 3;
  // Optional list of tag ratings add as many tags with a rating (1-5) of the list of cafeteriaRatingTags
  repeated RatingTag ratingTags = 4;
  // Optional comment (max 256 chars)
  string comment = 6;
}

message NewDishRatingRequest{
  // number in the range 1-5
  int32 points = 1;
  // Mandatory Name of the dish (EAT-API naming scheme "MENSA_GARCHING") Must be available int the given mensa
  string cafeteriaId = 2;
  // Mandatory Name of the dish (EAT-API naming scheme) Must be available int the given mensa
  string dish = 3;
  // Optional JPEG image in Base64
  bytes image = 4;
  // Optional list of tag ratings add as many tags with a rating (1-5) of the list of dishRatingTags
  repeated RatingTag ratingTags = 5;
  // Optional comment (max 256 chars)
  string comment = 7;
}

message GetRatingTagsReply{
  repeated RatingTagsOverview ratingTags = 1;
}


message RatingTagsOverview {
  int32 tagId= 1;
  string de = 2;
  string en = 3;
}

message RatingTag {
  int32 tagId= 1;
  double points = 2;
}

message RatingTagNewRequest {
  int32 tagId= 1;
  int32 points = 2;
}

message RatingTagResult {
  int32 tagId= 1;
  double avg = 2;
  double std = 3;
  int32 min = 4;
  int32 max = 5;
}



message GetCafeteriaReply{
  repeated Cafeteria cafeteria = 1;
}

message Cafeteria{
  string id = 1;
  string address = 2;
  double longitude = 3;
  double latitude = 4;
}


message GetDishesRequestRequest{
  string cafeteriaId = 1;
  int32 year = 2;
  int32 month = 3;
  int32 day = 4;
}

message GetDishesRequestReply{
  repeated string dish = 1;
}






message GetResponsiblePersonReply {
  repeated ResponsiblePersonElement responsiblePerson = 1;
}

message ResponsiblePersonElement{
  string name = 1;
  string telephone = 2;
  string email = 3;
  string faculty = 4;
  string tumID = 5;

}

message GetBuilding2GpsReply {
  repeated Building2GpsElement building2Gps = 1;
}

message Building2GpsElement{
    string id=1;
    string latitude=2;
    string longitude=3;

}

message GetAreaFacilitiesByBuildingNrReply {
  repeated RoomInformationElement areaFacilitiesByBuildingNr = 1;
}



message GetAreaFacilitiesByBuildingNrRequest {
  string building_nr = 1;
}

message GetListOfToiletsReply {
  repeated RoomInformationElement listOfToilets = 1;
}

message RoomInformationElement{
  int32 room_id = 1;
  string room_code = 2;
  string building_nr = 3;
  string arch_id = 4;
  string info = 5;
  string address = 6;
  string purpose = 7;
  string campus = 8;
  string name = 9;
}

message GetListOfElevatorsReply {
  repeated RoomInformationElement listOfElevators = 1;
}



message GetMoreInformationReply {
  repeated MoreInformationElement information = 1;
}

message MoreInformationElement{
  string title = 1;
  string category = 2;
  string url = 3;
}



