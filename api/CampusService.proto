syntax = "proto3";

option go_package = "github.com/TUM-Dev/Campus-Backend/api";
option java_multiple_files = true;
option java_package = "app.tum.campus.api";
option java_outer_classname = "CampusApiProto";
option csharp_namespace = "CampusApiProto";

package api;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service Campus {
  rpc GetTopNews (google.protobuf.Empty) returns (GetTopNewsReply) {
    option (google.api.http) = {
      get: "/news/top"
    };
  }

  rpc GetNewsSources (google.protobuf.Empty) returns (NewsSourceArray) {
    option (google.api.http) = {
      get: "/news/sources",
      response_body: "sources"
    };
  }

  rpc SearchRooms (SearchRoomsRequest) returns (SearchRoomsReply) {
    option (google.api.http) = {
      post: "/roomfinder/room/search",
      body: "*",
      response_body: "rooms"
    };
  }

  // a location is a campus location/building, e.g. "Garching Forschungszentrum"
  rpc GetLocations (GetLocationsRequest) returns (GetLocationsReply) {
    option (google.api.http) = {
      get: "/locations/{location}",
      response_body: "locations"
    };
  }

  rpc GetRoomMaps (GetRoomMapsRequest) returns (GetRoomMapsReply) {
    option (google.api.http) = {
      post: "/roomfinder/maps",
      body: "*",
      response_body: "maps"
    };
  }

  rpc GetRoomCoordinates (GetRoomCoordinatesRequest) returns (GetRoomCoordinatesReply) {
    option (google.api.http) = {
      post: "/roomfinder/room/coordinates",
      body: "*"
    };
  }

  rpc GetRoomSchedule (GetRoomScheduleRequest) returns (GetRoomScheduleReply) {
    option (google.api.http) = {
      post: "/roomfinder/room/scheduleById",
      body: "*",
      response_body: "events"
    };
  }


  // This endpoint retrieves Cafeteria Ratings from the Backend.
  rpc GetCafeteriaRatings (CafeteriaRatingRequest) returns (CafeteriaRatingResponse) {
    option (google.api.http) = {
      post: "/cafeteriaRating/cafeteria/get"
      body: "*",
    };
  }


  rpc GetDishRatings (DishRatingRequest) returns (DishRatingResponse) {
    option (google.api.http) = {
      post: "/cafeteriaRating/dish/get"
      body: "*",
    };
  }



  rpc NewCafeteriaRating (NewCafeteriaRatingRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/cafeteriaRating/cafeteria/newCafeteriaRating"
      body: "*",
    };
  }

  rpc NewDishRating (NewDishRatingRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/cafeteriaRating/dish/newDishRating"
      body: "*",
    };
  }

  rpc GetAvailableDishTags (google.protobuf.Empty) returns (GetRatingTagsReply) {
    option (google.api.http) = {
      get: "/cafeteriaRating/dish/allTags",
    };
  }

  rpc GetAvailableCafeteriaTags (google.protobuf.Empty) returns (GetRatingTagsReply) {
    option (google.api.http) = {
      get: "/cafeteriaRating/cafeteria/allTags",
    };
  }

  rpc GetCafeterias (google.protobuf.Empty) returns (GetCafeteriaResponse) {
    option (google.api.http) = {
      get: "/cafeteriaRating/cafeteria/allCafeterias",
    };
  }



  rpc getResponsiblePerson (google.protobuf.Empty) returns (getResponsiblePersonResponse) {
    option (google.api.http) = {
      get: "/barrierfree/contacts",
    };
  }

  rpc getBuilding2Gps (google.protobuf.Empty) returns (getBuilding2GpsResponse) {
    option (google.api.http) = {
      get: "/barrierfree/getBuilding2Gps",
    };
  }

  rpc getAreaFacilitiesByBuildingNr (getAreaFacilitiesByBuildingNrRequest) returns (getAreaFacilitiesByBuildingNrResponse) {
    option (google.api.http) = {
      get: "/barrierfree/nerby",
    };
  }

  rpc getListOfToilets (google.protobuf.Empty) returns (getListOfToiletsResponse) {
    option (google.api.http) = {
      get: "/barrierfree/listOfToilets",
    };
  }

  rpc getListOfElevators (google.protobuf.Empty) returns (getListOfElevatorsResponse) {
    option (google.api.http) = {
      get: "/barrierfree/listOfElevators",
    };
  }

  rpc getMoreInformation (google.protobuf.Empty) returns (getMoreInformationResponse) {
    option (google.api.http) = {
      get: "/barrierfree/moreInformation",
    };
  }


  rpc getOpeningTimes (GetOpeningTimesRequest) returns (GetOpeningTimesResponse) {
    option (google.api.http) = {
      get: "/openingtimes/:language",
    };
  }


  rpc getUpdateNote (GetUpdateNoteRequest) returns (GetUpdateNoteResponse) {
    option (google.api.http) = {
      get: "/updatenote/:version",
    };
  }


  rpc getStudyRoomList (GetStudyRoomListRequest) returns (GetStudyRoomListResponse) {
    option (google.api.http) = {
      get: "/studyroom/list",
    };
  }

  rpc getEventList(GetEventListRequest) returns (GetEventListResponse) {
    option (google.api.http) = {
      get: "/event/list",
    };
  }

  rpc postEventTicketMy(PostEventTicketMyRequest) returns (PostEventTicketMyResponse) {
    option (google.api.http) = {
      post: "/event/ticket/my",
    };
  }

  rpc postEventTicket(PostEventTicketRequest) returns (PostEventTicketResponse) {
    option (google.api.http) = {
      post: "/event/ticket/:ticket_id",
    };
  }

  rpc getEventTicketType(GetEventTicketTypeRequest) returns (GetEventTicketTypeResponse) {
    option (google.api.http) = {
      get: "/event/ticket/type/:event_id",
    };
  }

  rpc postEventTicketReserveMultiple(PostEventTicketReserveMultipleRequest) returns (PostEventTicketReserveMultipleResponse) {
    option (google.api.http) = {
      post: "/event/ticket/reserve/multiple",
    };
  }

  rpc postEventTicketPaymentStripePurchaseMultiple(PostEventTicketPaymentStripePurchaseMultiple) returns (PostEventTicketPaymentStripePurchaseMultiple) {
    option (google.api.http) = {
      post: "/event/ticket/payment/stripe/purchase/multiple",
    };
  }

  rpc postEventTicketPaymentStripeEphermalKeyTicket(PostEventTicketPaymentStripeEphermalKeyRequest) returns (PostEventTicketPaymentStripeEphermalKeyResponse) {
    option (google.api.http) = {
      post: "/event/ticket/payment/stripe/ephemeralkey",
    };
  }

  rpc getEventTicketStatus(GetEventTicketStatusRequest) returns (GetEventTicketStatusResponse) {
    option (google.api.http) = {
      get: "/event/ticket/status/:event_id",
    };
  }

  rpc getKino(GetKinoRequest) returns (GetKinoResponse) {
    option (google.api.http) = {
      get: "/kino/:last_id",
    };
  }

  rpc postFeedback(PostFeedbackRequest) returns (PostFeedbackResponse) {
    option (google.api.http) = {
      post: "/feedback",
    };
  }

  rpc postFeedbackIDImageNr(PostFeedbackIDImageNrRequest) returns (PostFeedbackIDImageNrResponse) {
    option (google.api.http) = {
      post: "/feedback/:id/:image_nr",
    };
  }
}

message GetRoomScheduleRequest {
  int32 room = 1;
  google.protobuf.Timestamp start = 2;
  google.protobuf.Timestamp end = 3;
}

message GetRoomScheduleReply {
  message RoomScheduleEvent {
    google.protobuf.Timestamp start = 1;
    google.protobuf.Timestamp end = 2;
    string title = 3;
    int32 event_id = 4;
    string course_code = 5;
  }
  repeated RoomScheduleEvent events = 1;
}

message GetRoomCoordinatesRequest {
  string arch_id = 1;
}

message GetRoomCoordinatesReply {
  string utm_zone = 1;
  float utm_easting = 2;
  float utm_northing = 3;
}

message GetRoomMapsRequest {
  string arch_id = 1;
}

message GetRoomMapsReply {
  message Map {
    int64 map_id = 1;
    string description = 2;
    int64 scale = 3;
    int64 width = 4;
    int64 height = 5;
  };
  repeated Map maps = 1;
}

message GetLocationsRequest {
  string location = 1;
}

message GetLocationsReply {
  message Location {
    string location = 1;
    string name = 2;
    string lon = 3;
    string lat = 4;
    string radius = 5;
  }
  repeated Location locations = 1;
}

message SearchRoomsRequest {
  string query = 1;
}

message SearchRoomsReply {
  repeated Room rooms = 1;
}

message Room {
  int32 room_id = 1;
  string room_code = 2;
  string building_nr = 3;
  string arch_id = 4;
  string info = 5;
  string address = 6;
  string purpose = 7;
  string campus = 8;
  string name = 9;
}

message NewsSourceArray {
  repeated NewsSource sources = 1;
}

message NewsSource {
  string source = 1;
  string title = 2;
  string icon = 3;
}

message GetTopNewsReply {
  string image_url = 1;
  string link = 2;
  google.protobuf.Timestamp created = 3;
  google.protobuf.Timestamp from = 4;
  google.protobuf.Timestamp to = 5;
}



message CafeteriaRatingRequest {
  // cafeteriaId Mandatory Name of the cafeteria (EAT-API naming scheme "MENSA_GARCHING")
  string cafeteriaId = 1;
  // Optional Parameter to define an interval for the ratings (Lower bound)
  google.protobuf.Timestamp from = 2;
  // Optional Parameter to define an interval for the ratings (Upper bound)
  google.protobuf.Timestamp to = 3;
  // Optional Parameter defines how many ratings are queried. Default is 3, Maximum is 100 ratings in one request
  int32 limit = 4;
}

message DishRatingRequest {
  // Mandatory Name of the cafeteria (EAT-API naming scheme "MENSA_GARCHING")
  string cafeteriaId = 1;
  // Mandatory Name of the dish (EAT-API naming scheme) Must be available int the given mensa
  string dish = 2;
  // Optional Parameter to define an interval for the ratings (Lower bound)
  google.protobuf.Timestamp from = 3;
  // Optional Parameter to define an interval for the ratings (Upper bound)
  google.protobuf.Timestamp to = 4;
  // Optional Parameter defines how many ratings are queried. Default is 3, Maximum is 100 ratings in one request
  int32 limit = 5;
}

message CafeteriaRatingResponse {
  repeated SingleRatingResponse rating = 1;
  double avg = 2;
  double std = 3;
  int32 min = 4;
  int32 max = 5;
  repeated RatingTagResult ratingTags = 6;
}


message DishRatingResponse {
  repeated SingleRatingResponse rating = 1;
  double avg = 2;
  double std = 3;
  int32 min = 4;
  int32 max = 5;
  repeated RatingTagResult ratingTags = 6;
  repeated RatingTagResult nameTags = 7;
}


message SingleRatingResponse{
  // number in the range 1-5
  int32 points = 1;
  // Optional JPEG image in Base64
  bytes image = 2;
  // Optional comment (max 256 chars)
  string comment = 3;
  repeated RatingTagNewRequest ratingTags = 4;
  google.protobuf.Timestamp visited = 5;
}


message NewCafeteriaRatingRequest{
  // number in the range 1-5
  int32 points = 1;
  string cafeteriaId = 2;
  bytes image = 3;
  // Optional list of tag ratings add as many tags with a rating (1-5) of the list of cafeteriaRatingTags
  repeated RatingTag ratingTags = 4;
  // Optional comment (max 256 chars)
  string comment = 6;
}

message NewDishRatingRequest{
  // number in the range 1-5
  int32 points = 1;
  // Mandatory Name of the dish (EAT-API naming scheme "MENSA_GARCHING") Must be available int the given mensa
  string cafeteriaId = 2;
  // Mandatory Name of the dish (EAT-API naming scheme) Must be available int the given mensa
  string dish = 3;
  // Optional JPEG image in Base64
  bytes image = 4;
  // Optional list of tag ratings add as many tags with a rating (1-5) of the list of dishRatingTags
  repeated RatingTag ratingTags = 5;
  // Optional comment (max 256 chars)
  string comment = 7;
}

message GetRatingTagsReply{
  repeated RatingTagsOverview ratingTags = 1;
}


message RatingTagsOverview {
  int32 tagId= 1;
  string de = 2;
  string en = 3;
}

message RatingTag {
  int32 tagId= 1;
  double points = 2;
}

message RatingTagNewRequest {
  int32 tagId= 1;
  int32 points = 2;
}

message RatingTagResult {
  int32 tagId= 1;
  double avg = 2;
  double std = 3;
  int32 min = 4;
  int32 max = 5;
}



message GetCafeteriaResponse{
  repeated Cafeteria cafeteria = 1;
}

message Cafeteria{
  string id = 1;
  string address = 2;
  double longitude = 3;
  double latitude = 4;
}



message getResponsiblePersonResponse {
  repeated ResponsiblePersonElement responsiblePerson = 1;
}

message ResponsiblePersonElement{
  string name = 1;
  string telephone = 2;
  string email = 3;
  string faculty = 4;
  string tumID = 5;

}

message getBuilding2GpsResponse {
  repeated Building2GpsElement building2Gps = 1;
}

message Building2GpsElement{
    string id=1;
    string latitude=2;
    string longitude=3;

}

message getAreaFacilitiesByBuildingNrResponse {
  repeated RoomInformationElement areaFacilitiesByBuildingNr = 1;
}



message getAreaFacilitiesByBuildingNrRequest {
  string building_nr = 1;
}

message getListOfToiletsResponse {
  repeated RoomInformationElement listOfToilets = 1;
}

message RoomInformationElement{
  int32 room_id = 1;
  string room_code = 2;
  string building_nr = 3;
  string arch_id = 4;
  string info = 5;
  string address = 6;
  string purpose = 7;
  string campus = 8;
  string name = 9;
}

message getListOfElevatorsResponse {
  repeated RoomInformationElement listOfElevators = 1;
}



message getMoreInformationResponse {
  repeated MoreInformationElement information = 1;
}

message MoreInformationElement{
  string title = 1;
  string category = 2;
  string url = 3;
}



