syntax = "proto3";

package api;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "CampusApiProto";
option go_package = "github.com/TUM-Dev/Campus-Backend/api";
option java_multiple_files = true;
option java_outer_classname = "CampusApiProto";
option java_package = "app.tum.campus.api";

service Campus {
  rpc ListNewsAlerts(ListNewsAlertsRequest) returns (ListNewsAlertsReply) {
    option (google.api.http) = {
      get: "/news/alerts"
      response_body: "alerts"
    };
  }

  rpc ListNewsSources(ListNewsSourcesRequest) returns (ListNewsSourcesReply) {
    option (google.api.http) = {
      get: "/news/sources",
      response_body: "sources"
    };
  }

  rpc ListNews(ListNewsRequest) returns (ListNewsReply) {
    option (google.api.http) = {
      get: "/news",
      response_body: "news"
    };
  }

  // This endpoint retrieves Canteen Ratings from the Backend.
  rpc ListCanteenRatings(ListCanteenRatingsRequest) returns (ListCanteenRatingsReply) {
    option (google.api.http) = {
      post: "/canteen/rating/get",
      body: "*",
    };
  }

  rpc GetDishRatings(GetDishRatingsRequest) returns (GetDishRatingsReply) {
    option (google.api.http) = {
      post: "/dish/rating/get",
      body: "*",
    };
  }

  rpc CreateCanteenRating(CreateCanteenRatingRequest) returns (CreateCanteenRatingReply) {
    option (google.api.http) = {
      post: "/canteen/rating/new",
      body: "*",
    };
  }

  rpc CreateDishRating(CreateDishRatingRequest) returns (CreateDishRatingReply) {
    option (google.api.http) = {
      post: "/dish/rating/new",
      body: "*",
    };
  }

  rpc ListAvailableDishTags(ListAvailableDishTagsRequest) returns (ListAvailableDishTagsReply) {
    option (google.api.http) = {
      get: "/dish/rating/allRatingTags",
      response_body: "rating_tags"
    };
  }

  rpc ListNameTags(ListNameTagsRequest) returns (ListNameTagsReply) {
    option (google.api.http) = {
      get: "/dish/rating/allDishTags",
      response_body: "rating_tags"
    };
  }

  rpc ListAvailableCanteenTags(ListAvailableCanteenTagsRequest) returns (ListAvailableCanteenTagsReply) {
    option (google.api.http) = {
      get: "/canteen/rating/allRatingTags",
      response_body: "rating_tags"
    };
  }

  rpc ListCanteens(ListCanteensRequest) returns (ListCanteensReply) {
    option (google.api.http) = {
      get: "/canteen/allCanteens",
      response_body: "canteen"
    };
  }

  rpc ListDishes(ListDishesRequest) returns (ListDishesReply) {
    option (google.api.http) = {
      get: "/dish/allDishes",
      response_body: "dish"
    };
  }

  rpc ListResponsiblePerson(ListResponsiblePersonRequest) returns (ListResponsiblePersonReply) {
    option (google.api.http) = {get: "/barrierfree/contacts"};
  }

  rpc ListMoreInformation(ListMoreInformationRequest) returns (ListMoreInformationReply) {
    option (google.api.http) = {get: "/barrierfree/moreInformation"};
  }

  rpc ListOpeningTimes(ListOpeningTimesRequest) returns (ListOpeningTimesReply) {
    option (google.api.http) = {get: "/openingtimes/{language}"};
  }

  rpc GetUpdateNote(GetUpdateNoteRequest) returns (GetUpdateNoteReply) {
    option (google.api.http) = {get: "/updatenote/{version}"};
  }

  rpc ListMovies(ListMoviesRequest) returns (ListMoviesReply) {
    option (google.api.http) = {get: "/movies/{last_id}"};
  }

  rpc CreateFeedback(stream CreateFeedbackRequest) returns (CreateFeedbackReply) {
    option (google.api.http) = {
      post: "/feedback",
      body: "attachment",
    };
  }

  rpc GetUploadStatus(GetUploadStatusRequest) returns (GetUploadStatusReply) {
    option (google.api.http) = {get: "/device/uploaded/{lrz_id}"};
  }

  rpc GetNotification(GetNotificationRequest) returns (GetNotificationReply) {
    option (google.api.http) = {get: "/notifications/{notification_id}"};
  }

  rpc GetNotificationConfirm(GetNotificationConfirmRequest) returns (GetNotificationConfirmReply) {
    option (google.api.http) = {get: "/notifications/confirm/{notification_id}"};
  }

  rpc GetMember(GetMemberRequest) returns (GetMemberReply) {
    option (google.api.http) = {get: "/members/{lrz_id}"};
  }

  rpc GetCanteenHeadCount(GetCanteenHeadCountRequest) returns (GetCanteenHeadCountReply) {
    option (google.api.http) = {get: "/canteen/headCount/{canteen_id}"};
  }

  // Endpoint for the iOS app to respond to background notifications requests
  rpc IOSDeviceRequestResponse(IOSDeviceRequestResponseRequest) returns (IOSDeviceRequestResponseReply) { // TODO naming
    option (google.api.http) = {
      post: "/ios/notifications/deviceRequestResponse",
      body: "*",
    };
  }

  // Create an device (Android/iOS/Windows) for push notifications
  rpc CreateDevice(CreateDeviceRequest) returns (CreateDeviceReply) {
    option (google.api.http) = {
      post: "/device",
      body: "*",
    };
  }

  // Delete a device from push notifications
  rpc DeleteDevice(DeleteDeviceRequest) returns (DeleteDeviceReply) {
    option (google.api.http) = {delete: "/device/{device_id}"};
  }
}

enum DeviceType {
  IOS = 0;
  ANDROID = 1;
  WINDOWS = 2;
}

message CreateDeviceRequest {
  string device_id = 1;
  optional string public_key = 2;
  DeviceType device_type = 3;
}

message CreateDeviceReply {
  string device_id = 1;
}

message DeleteDeviceRequest {
  string device_id = 1;
  DeviceType device_type = 2;
}

message DeleteDeviceReply {
  string device_id = 1;
}

message IOSDeviceRequestResponseRequest {
  string request_id = 1;
  string payload = 2;
}

message IOSDeviceRequestResponseReply {
  string message = 1;
}
message News {
  int64 id = 1;
  string title = 2;
  string text = 3;
  string link = 4;
  // where a news thumbnail is stored. empty string means no image is available
  string image_url = 5;
  // the id of the news source
  string source_id = 6;
  // where the icon can be found
  string source_icon_url = 9;
  // human readable title of the news source
  string source_title = 10;
  // when the news item was created in OUR database
  google.protobuf.Timestamp created = 7;
  // the date of the news item
  google.protobuf.Timestamp date = 8;
}

message ListNewsReply {
  repeated News news = 1;
}

message ListNewsRequest {
  // the last id of the news item received. 0 to get all news items
  int32 last_news_id = 1;
  // filter by news source id. 0 to get all news items
  int32 news_source = 2;
  // the oldest time you want to be included in the response
  google.protobuf.Timestamp oldest_date_at = 3;
}

message ListNewsSourcesRequest {}

message ListNewsSourcesReply {
  repeated NewsSource sources = 1;
}

message NewsSource {
  string source = 1;
  string title = 2;
  // where the icon can be found
  string icon_url = 3;
}

message ListNewsAlertsRequest {
  // the last id of the news item received. 0 to get all news items
  int32 last_news_alert_id = 1;
}

message ListNewsAlertsReply {
  repeated NewsAlert alerts = 1;
}

message NewsAlert {
  string image_url = 1;
  string link = 2;
  google.protobuf.Timestamp created = 3;
  google.protobuf.Timestamp from = 4;
  google.protobuf.Timestamp to = 5;
}

message ListCanteenRatingsRequest {
  // canteenId Mandatory Name of the canteen (EAT-API naming scheme "MENSA_GARCHING")
  string canteen_id = 1;
  // Optional Parameter to define an interval for the ratings (Lower bound)
  google.protobuf.Timestamp from = 2;
  // Optional Parameter to define an interval for the ratings (Upper bound)
  google.protobuf.Timestamp to = 3;

  // Optional Parameter defines how many ratings are queried. If all ratings should be queried, enter "-1"
  int32 limit = 4;
}
message ListCanteenRatingsReply {
  repeated SingleRatingReply rating = 1;
  double avg = 2;
  double std = 3;
  int32 min = 4;
  int32 max = 5;
  repeated RatingTagResult rating_tags = 6;
}

message GetDishRatingsRequest {
  // Mandatory Name of the canteen (EAT-API naming scheme "MENSA_GARCHING")
  string canteen_id = 1;
  // Mandatory Name of the dish (EAT-API naming scheme) Must be available int the given mensa
  string dish = 2;
  // Optional Parameter to define an interval for the ratings (Lower bound)
  google.protobuf.Timestamp from = 3;
  // Optional Parameter to define an interval for the ratings (Upper bound)
  google.protobuf.Timestamp to = 4;
  // Optional Parameter defines how many ratings are queried. If all ratings should be queried, enter "-1"
  int32 limit = 5;
}

message GetDishRatingsReply {
  repeated SingleRatingReply rating = 1;
  double avg = 2;
  double std = 3;
  int32 min = 4;
  int32 max = 5;
  repeated RatingTagResult rating_tags = 6;
  repeated RatingTagResult name_tags = 7;
}

message SingleRatingReply {
  // number in the range 1-5
  int32 points = 1;
  // Optional JPEG image in Base64
  bytes image = 2;
  // Optional comment (max 256 chars)
  string comment = 3;
  repeated RatingTagNewRequest rating_tags = 4;
  google.protobuf.Timestamp visited = 5;
}

message CreateCanteenRatingReply {}

message CreateCanteenRatingRequest {
  // number in the range 1-5
  int32 points = 1;
  string canteen_id = 2;
  bytes image = 3;
  // Optional list of tag ratings add as many tags with a rating (1-5) of the list of canteenRatingTags
  repeated RatingTag rating_tags = 4;
  // Optional comment (max 256 chars)
  string comment = 6;
}

message CreateDishRatingReply {}
message CreateDishRatingRequest {
  // number in the range 1-5
  int32 points = 1;
  // Mandatory Name of the dish (EAT-API naming scheme "MENSA_GARCHING") Must be available int the given mensa
  string canteen_id = 2;
  // Mandatory Name of the dish (EAT-API naming scheme) Must be available int the given mensa
  string dish = 3;
  // Optional JPEG image in Base64
  bytes image = 4;
  // Optional list of tag ratings add as many tags with a rating (1-5) of the list of dishRatingTags
  repeated RatingTag rating_tags = 5;
  // Optional comment (max 256 chars)
  string comment = 7;
}

message ListAvailableDishTagsRequest {}
message ListAvailableDishTagsReply {
  repeated TagsOverview rating_tags = 1;
}

message ListNameTagsRequest {}
message ListNameTagsReply {
  repeated TagsOverview rating_tags = 1;
}

message ListAvailableCanteenTagsRequest {}
message ListAvailableCanteenTagsReply {
  repeated TagsOverview rating_tags = 1;
}

message TagsOverview {
  int32 tag_id = 1;
  string de = 2;
  string en = 3;
}

message RatingTag {
  int64 tag_id = 1;
  double points = 2;
}

message RatingTagNewRequest {
  int32 tag_id = 1;
  int32 points = 2;
}

message RatingTagResult {
  int32 tag_id = 1;
  double avg = 2;
  double std = 3;
  int32 min = 4;
  int32 max = 5;
}

message ListCanteensRequest {}
message ListCanteensReply {
  repeated Canteen canteen = 1;
}

message Canteen {
  string id = 1;
  string address = 2;
  double longitude = 3;
  double latitude = 4;
}

message ListDishesRequest {
  string canteen_id = 1;
  // >=2022 until the current year
  int32 year = 2;
  // range 1 - 53
  int32 week = 3;
  // range 0 (Monday) - 4 (Friday)
  int32 day = 4;
}

message ListDishesReply {
  repeated string dish = 1;
}

message ListResponsiblePersonRequest {}
message ListResponsiblePersonReply {
  repeated ResponsiblePerson responsible_person = 1;
}

message ResponsiblePerson {
  string name = 1;
  string telephone = 2;
  string email = 3;
  string faculty = 4;
  string tum_id = 5;
}

message RoomInformationElement {
  int32 room_id = 1;
  string room_code = 2;
  string building_nr = 3;
  string arch_id = 4;
  string info = 5;
  string address = 6;
  string purpose = 7;
  string campus = 8;
  string name = 9;
}

message ListMoreInformationRequest {}
message ListMoreInformationReply {
  message MoreInformation {
    string title = 1;
    string category = 2;
    string url = 3;
  }
  repeated MoreInformation infos = 1;
}

message ListOpeningTimesRequest {
  string language = 1;
}

message ListOpeningTimesReply {
  repeated OpeningTimesMsgElement facilities = 1;
}

message OpeningTimesMsgElement {
  int32 id = 1;
  string category = 2;
  string name = 3;
  string address = 4;
  string room = 5;
  string transport_station = 6;
  string opening_hours = 7;
  string infos = 8;
  string url = 9;
  string language = 10;
  int32 reference_id = 11;
}

message GetUpdateNoteRequest {
  int64 version = 1;
}

message GetUpdateNoteReply {
  string message = 1;
  string version_name = 2;
}

message ListMoviesRequest {
  // the last Id you have requested. Use -1 to get all movies
  int32 last_id = 1;
  // the oldest time you want to be included in the response
  google.protobuf.Timestamp oldest_date_at = 2;
}

message ListMoviesReply {
  repeated Movie movies = 1;
}

message Movie {
  reserved /*string cover_name = */ 1;
  reserved /*string cover_path =*/ 2;
  int64 movie_id = 3;
  google.protobuf.Timestamp date = 4;
  google.protobuf.Timestamp created = 5;
  string title = 6;
  // release year of the movie
  string release_year = 7;
  string runtime = 8;
  string genre = 9;
  string director = 10;
  string actors = 11;
  // imdb rating
  string imdb_rating = 12;
  string description = 13;
  int64 cover_id = 14;
  reserved /*string trailer*/ 15;
  // Where to find additional information about this movie
  string link = 16;
  // Where to find a cover image for this movie
  string cover_url = 17;
}

message CreateFeedbackRequest {
  enum Recipient {
    // Feedback for the TUM Dev Team
    TUM_DEV = 0;
    // Feedback for the general TUM Contact Form
    TUM_CONTACT = 1;
  }

  // who is the feedback for
  Recipient recipient = 1;
  // the email address of the user
  string from_email = 2;
  // The actual message
  string message = 3;
  // Optional location which the user can choose (data protection) to attach or not
  Coordinate location = 4;
  // Optional os information which the user can choose (data protection) to attach or not
  string os_version = 5;
  // Optional app information which the user can choose (data protection) to attach or not
  string app_version = 6;
  // Optional file in Base64.
  // Accepted file formats: jpeg, jpg, png, webp, md, txt, pdf
  // Maximum file size 4MB as by Protobuf maximum per request message size
  bytes attachment = 7;
}
message Coordinate {
  double latitude = 1;
  double longitude = 2;
}

message CreateFeedbackReply {}

message CreateFeedbackImageReply {
  string status = 1;
}

message CreateFeedbackImageRequest {
  int32 id = 1;
  int32 image_nr = 2;
  //todo where does the file come from?
}

message GetMemberRequest {
  string lrz_id = 1;
}

message GetMemberReply {
  string lrz_id = 1;
  string name = 2;
  int32 member_id = 3;
}

message GetUploadStatusRequest {
  string lrz_id = 1;
}

message GetUploadStatusReply {
  string fcm_token = 1;
  string public_key = 2;
  bool student_id = 3;
  bool employee_id = 4;
  bool external_id = 5;
}

message GetNotificationRequest {
  int32 notification_id = 1;
}
message GetNotificationReply {
  int32 notification_id = 1;
  int32 type = 2;
  string title = 3;
  string description = 4;
  string signature = 5;
}

message GetNotificationConfirmRequest {
  int32 notification_id = 1;
}
message GetNotificationConfirmReply {
  string status = 1;
}

message GetCanteenHeadCountRequest {
  // The requested canteen ID
  string canteen_id = 1;
}

message GetCanteenHeadCountReply {
  // The absolut count of humans in the canteen. Only valid in case percent != -1.
  uint32 count = 1;
  // The maximum nunmber of humans in the canteen for the percent to be 100.00. Only valid in case percent != -1.
  uint32 max_count = 2;
  // Current capacity utilization of the canteen clamped to 0 and 100 or -1 in case no data is available.
  float percent = 3;
  // A time stamp indicating how up to date the response is. Only valid in case percent != -1.
  google.protobuf.Timestamp timestamp = 4;
}
