FROM golang:1.19.0-alpine3.15 as builder

# Install git + SSL ca certificates.
# Git is required for fetching the dependencies.
# Ca-certificates is required to call HTTPS endpoints.
RUN apk update && apk add --no-cache git ca-certificates tzdata alpine-sdk bash && update-ca-certificates

# Create appuser
RUN adduser -D -g '' appuser
WORKDIR $GOPATH/server/

# setting up workspace
COPY go.work ./
COPY go.work.sum ./

# go mod api
COPY ./api/go.mod ./api/
COPY ./api/go.sum ./api/

# go mod server
COPY ./server/go.mod ./server/
COPY ./server/go.sum ./server/

# go mod client
COPY ./client/go.mod ./client/
COPY ./client/go.sum ./client/

# go mod download
RUN go mod download

# Copy source code
COPY ./server ./server/
COPY ./api ./api/
COPY ./client ./client/

# copy static files
COPY ./server/backend/static_data /static_data

# bundle version into binary if specified in build-args, dev otherwise.
ARG version=dev

# Compile statically
ENV CGO_ENABLED=0
ENV GOOS=linux
ENV GOARCH=amd64
RUN go build -a -ldflags "-w -extldflags '-static' -X main.Version=${version}" -o /backend ./server/main.go
RUN chmod +x /backend

FROM scratch as executor
COPY --from=builder /backend /backend
COPY --from=builder /static_data /static_data

# Import from builder - needed for running
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
COPY --from=builder /etc/passwd /etc/passwd

# Use an unprivileged user
USER appuser

# Run the main binary
CMD ["/backend"]
